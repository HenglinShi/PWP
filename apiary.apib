FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# PWP21


# Group Link Relations

This section described custom link relations defined in this API.
These are not resources.The API also uses 
[IANA link relations](http://www.iana.org/assignments/link-relations/link-relations.xhtml) where applicable.
Custom link relations are CURIEs that use the mumeta prefix. 


## add-account
This is a control that is used to add an account
to the associated collection resource.
The control includes a JSON schema and must be accessed with POST. 

## accounts-all
Leads to the root level accounts
collection which is a list of all
accounts known to the API. 





## add-job
This is a control that is used to add a job
to the associated collection resource.
The control includes a JSON schema and must be accessed with POST. 



## jobs-all
Leads to the root level jobs
collection which is a list of all jobs 
known to the API regardless of accounts.
This collection can be sorted using query parameters as described in the resource documentation.


## jobs-of
Leads to a collection resoruce that includes all jobs
by the associated account.



## add-transaction
This is a control that is used to add a transaction
to the associated collection resource.
The control includes a JSON schema and must be accessed with POST. 



## add-result
This is a control that is used to add aresult
to the associated collection resource.
The control includes a JSON schema and must be accessed with POST. 

## delete
Deletes the associated resource. Must be accessed with DELETE

## transactions-all

## results-all



## edit

# Group Profiles

This section includes resource profiles which provide semantic descriptions for the attributes of each resource, 
as well as the list of controls (by link relation) available from that resource.

## Error Profile

Profile definition for all errors returned by the API.
See [Mason error control](https://github.com/JornWildt/Mason/blob/master/Documentation/Mason-draft-2.md#property-name-error)
for more information about errors.

+ Attributes

    + resource_url (string, required) - URI of the resource the error was generated from. 


## Account Profile

Profile definition for all account related resources.

### Link Relations

This section lists all possible link relations associated with accounts;
not all of them are necessarily present on each resource type.
The following link relations from the mumeta namespace are used:

 * [add-account](reference/link-relations/add-account)
 * [add-job](reference/link-relations/add-job)
 * [accounts-all](reference/link-relations/accounts-all)
 * [jobs-all](reference/link-relations/jobs-all)
 * [delete](reference/link-relations/delete)

<!-- 
 * [add-album](reference/link-relations/add-album)
 * [add-track](reference/link-relations/add-track)
 * [albums-all](reference/link-relations/albums-all)
 * [albums-va](reference/link-relations/albums-va)
 * [artists-all](reference/link-relations/artists-all)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * profile
 * self
-->
### Semantic Descriptors

#### Data Type Account

 * `id`: The id of the account. Ids are unique per account, and are used to address account resources. Mandatory, auto-generated.
 * `name`: The name of the account. Ids are unique per account, and can also be used to address account resources. Mandatory.
 * `email`: The email adress of the account, must be a string. Optional.
 * `billing_unit`: A virtual currecy used for purchasing job execution. Float Type. Default is 0.0
 * `registered_time`: The registration time of the account in [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html) (YYYY-MM-DD). Use 01 for month or day if not known. Mandatory.

<!--
 * `title`: The albums title as it is written on the release, including capitalization and punctuation. Titles are unique per artist, and are used to address album resources. Mandatory.
 * `release`: Album's release date in [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html) (YYYY-MM-DD). Use 01 for month or day if not known. Mandatory.
 * `artist`: The album's artist's name (null for VA albums), including capitalization and pucntuation.
 * `discs`: Number of discs the album contains. Default is 1.
 * `genre`: The albums musical genre as a string. Optional.
-->



## Job Profile
### Link Relations
This section lists all possible link relations associated with jobs;
not all of them are necessarily present on each resource type.
The following link relations from the mumeta namespace are used:

 * [add-job](reference/link-relations/add-job)
 * [delete]()

### Semantic Descriptors


#### Data Type Job

 * `id`: 123
 * `user_id`: 123
 * `created_time`: 123
 * `job_type`: 123
 * `status`: 123
 * `result_id`: 123
 * `transaction_id`: 123
 


## Transaction Profile
### Link Relations
 * [add-transaction]()
 * [delete]()

### Semantic Descriptor

#### Data Type Transaction
 * `id`:
 * `start_time`:
 * 'finish_time':
 * `run_time`:
 * `unit_price`:
 * `total_price`:



## Result Profile
### Link Relations
 * [add-result]()
 * [delete]()

### Semantic Descriptor

#### Data Type Transaction
 * `id`:
 * `content`:





# Group Entry
This group contains the entry point of the API

## Entry Point [/api/]

### Get entry point [GET]

Get the API entry point

+ Request

    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "mumeta": {
                        "name": "/pwp21/link-relations#"
                    }
                },
                "@controls": {
                    "mumeta:accounts-all": {
                        "href": "/api/accounts/"
                    },
                    "mumeta:jobs-all": {
                        "href": "/api/jobs/"
                    }
                     "mumeta:transactions-all": {
                        "href": "/api/transactions/"
                    }
                     "mumeta:results-all": {
                        "href": "/api/results/"
                    }
                }
            }





# Group Accounts

All of these resources use the [Account Profile](reference/profiles/account-profile). 
In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## Accounts Collection [/api/accounts/]

A list of all accounts known to the API.
This collection can be sorted using the sortby query parameter.


### List all accounts [GET]

Get a list of all accounts known to the API.

+ Relation: accounts-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
  
    + Body

            {
                "@namespaces": {
                    "mumeta": {
                        "name": "/pwp21/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/accounts/"
                    },
                    "mumeta:artists-all": {
                        "href": "/api/accounts/",
                        "title": "All accounts"
                    },
                    "mumeta:jobs-all": {
                        "href": "/api/jobs/",
                        "title": "All jobs"
                    }
                },
                "items": [
                {
                    "id": 1,
                    "name": "hshi",
                    "email": "Henglin.Shi@oulu.fi",
                    "billing_unit": 100,
                    "registered_time": "2021-01-01"
                    "@control": {
                        "self": {
                            "href": "/api/accounts/hshi"
                        },
                        "profile": {
                            "href": "/profiles/account/"
                        }
                    }
                },
                {
                    "id": 2,
                    "name": "hhshi",
                    "email": "hhshi1@oulu.fi",
                    "billing_unit": 100,
                    "registered_time": "2019-12-01",
                    "@control": {
                        "self": {
                            "href": "/api/accounts/hhshi"
                        },
                        "profile": {
                            "href": "/profiles/account/"
                        }
                    }
                }
              ]
            }




### Add a new account [POST]

Adds a new account. The account representation must be valid against the account schema.

+ Relation: add-account
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name": "shih",
                "email": "shih@oulu.fi",
                "billing_unit": 0.0,
                "registered_time": "2020-02-02"
            }

+ Response 201

    + Headers
    
            Location: /api/accounts/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/accounts/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Release date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add an account with a username that already exists.

    + Body
    
            {
                "resource_url": "/api/accounts/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Artist 'VA' already has album with title 'Thorns vs Emperor'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
    
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
      
            {
                "resource_url": "/api/accounts/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }





## Account [/api/accounts/{account}]

This resource represents an account, 
as identified by the account unique name. 


+ Parameters

    + account: hshi (string) - account unique name (name)



### Account information [GET]

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
            
            
+ Response 200 (application/vnd.mason+json)


    + Body
    
            {
                "@namespaces": {
                    "mumeta": {
                        "name": "/pwp21/link-relations#"
                    }
                },
                "name": "hshi",
                "email": "Henglin.Shi@oulu.fi",
                "billing_unit": 600.0,
                "registered_time": "2020-01-01",
                "@controls": {
                    "self": {
                        "href": "/api/accounts/hshi/"
                    },
                    "mumeta:jobs-all": {
                        "href": "/api/accounts/hshi/jobs/"
                    },
                    "edit": {
                        "href": "/api/accounts/hshi/",
                        "title": "Edit this account",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "description": "Account email",
                                    "type": "string"
                                },
                            }
                        }
                    },
                    "mumeta:delete": {
                        "href": "/api/accounts/hshi/",
                        "title": "Delete this account",
                        "method": "DELETE"
                    }
                }
            }




### Edit account information [PUT]


Replace the account's representation with a new one. 
Missing optinal fields will be set to null.
Must validate against the account schema. 


+ Relation: edit
+ Request (application/json)

    + Headers
      
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name": "hshi",
                "registered_time": "2014-12-03",
                "email": "hshi@oulu.fi",
                "billing_unit": 200.0
            }

+ Response 204





+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/account/hshi/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Regisgered date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }



+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an account that doesn't exist (due to non-existent account). 

    + Body
    
            {
                "resource_url": "/api/accounts/hshi/",
                "@error": {
                    "@message": "Account not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
    
    
    
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the account's name to a one that is already in use for the account.

    + Body
    
            {
                "resource_url": "/api/accounts/hshi/",
                "@error": {
                    "@message": "Name reserved",
                    "@messages": [
                        "Account 'hshi' already in use"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
    
    
    
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
      
            {
                "resource_url": "/api/accounts/hshi/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }




### Delete account [DELETE]
Deletes the account, and all associated jobs.


+ Relation: delete
+ Request

    + Headers
      
            Accept: application/vnd.mason+json
    
+ Response 204



+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an album that doesn't exist (due to non-existent artist or album). 

    + Body
    
            {
                "resource_url": "/api/accounts/hshi/",
                "@error": {
                    "@message": "Account not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }



# Group Job

All of these resources use the [Job Profile](reference/profiles/job-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.


## Jobs Collection [/api/jobs/?sortby={field}]

A list of all jobs known to the API. 
This collection can be sorted using the sortby query parameter.
For each job only account name and created_time is included, 
more information can be found by following the `self` relation of each job. 
Jobs cannot be directly added to this collection, it only supports GET.

+ Parameters

    + field (string, optional) - Field to use for sorting
        + account: 1  (int) - account's id (user_id)
        + id: 1 (int) - job's id






### List all jobs [GET]

+ Response 415 (application/vnd.mason+json)

## Jobs by Account [/api/accounts/{account}/jobs/]
### List jobs by account [GET]

+ Response 415 (application/vnd.mason+json)

### Add job for account [POST]

+ Response 415 (application/vnd.mason+json)

## Job [/api/accounts/{account}/jobs/{job}/]



This resource represents a job by a account, 
as identified by the account's name and the job id. 



+ Parameters

    + account: 1  (int) - account's id (user_id)
    + id: 1 (int) - job's id
    
    
    
### Job information [GET]


Get the album representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "mumeta": {
                        "name": "/musicmeta/link-relations#"
                    }
                },
                "title": "Hello World",
                "release": "2014-12-03",
                "genre": "Pop Rock",
                "discs": 1,
                "artist": "Scandal",
                "@controls": {
                    "author": {
                        "href": "/api/artists/scandal/"
                    },
                    "mumeta:albums-by": {
                        "href": "/api/artists/scandal/albums/"
                    },
                    "self": {
                        "href": "/api/artists/scandal/albums/Hello World/"
                    },
                    "profile": {
                        "href": "/profiles/album/"
                    },
                    "collection": {
                        "href": "/api/albums/"
                    },
                    "mumeta:artists-all": {
                        "href": "/api/artists/",
                        "title": "All artists"
                    },
                    "mumeta:add-track": {
                        "href": "/api/artists/scandal/albums/Hello World/",
                        "title": "Add a track to this album",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Track title",
                                    "type": "string"
                                },
                                "disc_number": {
                                    "description": "Disc number",
                                    "type": "integer",
                                    "default": 1
                                },
                                "track_number": {
                                    "description": "Track number on disc",
                                    "type": "integer"
                                },
                                "length": {
                                    "description": "Track length",
                                    "type": "string",
                                    "pattern": "^:[0-9]{2}:[0-5][0-9]:[0-5][0-9]$"
                                }
                            },
                            "required": ["title", "track_number", "length"]
                        }
                    },
                    "edit": {
                        "href": "/api/artists/scandal/albums/Hello World/",
                        "title": "Edit this album",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Album title",
                                    "type": "string"
                                },
                                "release": {
                                    "description": "Release date",
                                    "type": "string",
                                    "pattern": "^[0-9]{4}-[01][0-9]-[0-3][0-9]$"
                                },
                                "genre": {
                                    "description": "Album's genre(s)",
                                    "type": "string"
                                },
                                "discs": {
                                    "description": "Number of discs",
                                    "type": "integer",
                                    "default": 1
                                }
                            },
                            "required": ["title", "release"]
                        }
                    },
                    "mumeta:delete": {
                        "href": "/api/artists/scandal/albums/Hello World/",
                        "title": "Delete this album",
                        "method": "DELETE"
                    }
                },
                "items": [
                    {
                        "title": "Image",
                        "length": "00:04:26",
                        "disc_number": 1,
                        "track_number": 1,
                        "@controls": {
                            "self": {
                                "href": "/api/artists/scandal/albums/Hello World/1/1/"
                            },
                            "profile": {
                                "href": "/profiles/track/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an album that doesn't exist (either due to non-existent artist or album).

    + Body
    
            {
                "resource_url": "/api/artists/scandal/albums/Yellow/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
        
        


### Edit job information [PUT]


Replace the album's representation with a new one. Missing optinal fields will be set to null. Must validate against the album schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
      
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "user_id": "1",
                "created_time": "2014-12-03",
                "status": "created"
            }
    
+ Response 204




+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent created date.

    + Body
    
            {
                "resource_url": "/api/accounts/hshi/jobs/1/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Created date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit a job that doesn't exist (due to non-existent account or job). 

    + Body
    
            {
                "resource_url": "/api/accounts/hshi/jobs/1/",
                "@error": {
                    "@message": "Job not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
    

    
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
      
            {
                "resource_url": "/api/accounts/hshi/jobs/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }



### Delete job [DELETE]


Deletes the job, and all associated

+ Relation: delete
+ Request

    + Headers
      
            Accept: application/vnd.mason+json
    
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an job that doesn't exist (due to non-existent job). 

    + Body
    
            {
                "resource_url": "/api/accounts/hshi/jobs/1/",
                "@error": {
                    "@message": "job not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }





# Group Transactions
## Transactions Collection
### List all transactions
### Add a new transaction

## Transactions by Account



## Transaction
### Transaction information
### Edit transaction
### Delete transaction


# Group Results
## Results Collection

## Results by Account


## Result








## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }